<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" >
	<generator uri="https://dieghernan.github.io/chulapa" version="1.0.0">Chulapa</generator>
	<link href="https://bglucca.github.io/atom.xml" rel="self" type="application/atom+xml" />
	<link href="https://bglucca.github.io/" rel="alternate" type="text/html" />
	<updated>2025-09-07T18:37:50+00:00</updated>
	<id>https://bglucca.github.io/atom.xml</id>
	<title>My DS Journey | My learnings and experiences as a Data Scientist</title>
	<subtitle>My learnings and experiences as a Data Scientist</subtitle>
	<author>
		<name>Lucca Bevilacqua</name>
					
	</author>
	<rights>(c) 2025, Lucca Bevilacqua</rights>
	
	<logo></logo><entry>
		<title type="html">MLflow 101 - My Quickstart</title>
		<link href="https://bglucca.github.io/20231012_mlflow-quickstart/" rel="alternate" type="text/html" title="MLflow 101 - My Quickstart"/>
		<published>2023-10-12T00:00:00+00:00</published>
		<updated>2023-10-12T00:00:00+00:00</updated>
		<id>https://bglucca.github.io/20231012_mlflow-quickstart/</id>
		<content type="html" xml:base="https://bglucca.github.io/20231012_mlflow-quickstart/">
		
		
		&lt;h3&gt;A gentle introduction to MLFlow and its applications with Hyperparameter tuning&lt;/h3&gt;
		
  		
			&lt;img src=&#39;https://bglucca.github.io/assets/img/mlflow-quickstart/cover-image.jpg&#39; &gt;
			
	&lt;p&gt;11 min.&lt;/p&gt;
			&lt;p&gt;If you’ve been working with Data Science I’m sure that at some point you needed to try a lot of different things to solve a problem. At the same time, you also needed to keep track of the performance of what you tried to do.&lt;/p&gt;

&lt;h2 id=&quot;projects-experiments--spreadsheets&quot;&gt;Projects, experiments &amp;amp; Spreadsheets&lt;/h2&gt;
&lt;p&gt;Probably at some point you, like me, fired up an Excel spreadsheet and tried to manually keep track of things. This often results in chaotic organization both in the project folder as well as the spreadsheet itself.&lt;/p&gt;

&lt;p&gt;It is hard to keep track of all possible things that can run differently in an experiement. Preprocessing steps for specific models, the models themselves, the parameters,…&lt;/p&gt;

&lt;p&gt;MLflow comes in to help sort this kind of thing. It is a platform built to organize, facilitate experimentation, streamline and serve models to production. Basically a platform to manage ML lifecycle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quick stop before we move forward, you can read this on &lt;a href=&quot;https://medium.com/@luccagomes/making-browsing-airbnb-easier-through-data-science-bf96e2a72e0c&quot;&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/a&gt; as well&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-brief-intro-to-ml-flow&quot;&gt;A (Brief) Intro to ML Flow&lt;/h2&gt;
&lt;p&gt;As of this writing, MLflow has 5 components in total. For this quick guide I’ll use only a few of the available ones (highlighted below), which are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Tracking&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Models&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Model Registry&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Projects&lt;/li&gt;
  &lt;li&gt;Recipes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;Tracking&lt;/strong&gt; module acts pretty much as a logger, but for everything model related: What model is being used, which parameters are configured in the run, outputs (even tabular and images), etc.&lt;/p&gt;

&lt;p&gt;Tracking has many “flavors” — how common ML/AI libraries such as sklearn, Keras, H2O are named — to help store important data and metadata of commonly used libs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Models&lt;/strong&gt; is a form of wrapping a model after training. It encapsulates a model in such a way the model can be saved, containerized or accessed easily to be ran in other environments or easily called.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Model Registry&lt;/strong&gt; is the logical next step of the Models wrapper. It enables to register models that are useful and will be used in production. By registering the models, we can perform version management to them. This makes it easier to organize and register the production pipeline of a model.&lt;/p&gt;

&lt;p&gt;MLflow tracks, throughout the components, basically 3 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Models: model objects that can be agnostic or belong to a certain flavor of ML/AI library;&lt;/li&gt;
  &lt;li&gt;Parameters: Constant values related to the models (e.g. the weights of a Neural Network);&lt;/li&gt;
  &lt;li&gt;Artifacts: Every sort of file generated in a run. You can, for instance, save an image (like the plot of a DecisionTree) or a table.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These objects are tracked in a &lt;em&gt;run&lt;/em&gt; level within an &lt;em&gt;experiment&lt;/em&gt;. An &lt;em&gt;experiment&lt;/em&gt; is a general environment for MLflow to store information. A run happens within an environment. A run is pretty much the name MLflow gives to an algorithm execution.&lt;/p&gt;

&lt;p&gt;To centralize all components and facilitate usage, MLflow has a really intuitive UI that can be easily started from the terminal.&lt;/p&gt;

&lt;p&gt;MLflow can store all its files and artifacts locally. But, you can use a DB such as PostgreSQL to log the artifacts. For my tests I left it saving the data locally. In this case, MLflow generates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlruns&lt;/code&gt; folder in the directory of the project that I supress in the repo using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-problem-for-a-quick-start&quot;&gt;A Quick Problem for a Quick Start&lt;/h2&gt;
&lt;p&gt;To try out MLflow in practice I used a basic dataset to solve a straightfoward problem. I’ve used data sourced from Amazon made available in Kaggle to &lt;strong&gt;predict the sales&lt;/strong&gt; amount for certain groceries in the UK. You can find the data &lt;a href=&quot;https://www.kaggle.com/datasets/dalmacyali1905/amazon-uk-grocery-dataset-unsupervised-learning/data&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main focus of this test is to understand and use MLflow. So, for this purpose, only basic data cleaning was performed. Let’s get into it.&lt;/p&gt;

&lt;p&gt;First things first, let’s get a sense of the data at hand. We have data for over 6.000 products that contain some features regarding the product itself as well as its performance in the marketplace (e.g. price, sales, revenue, …). See an example below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/mlflow-quickstart/data-excerpt.webp&quot; alt=&quot;Raw Data Excerpt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We fetch the raw data and after some cleaning, feature engineering and subsetting we end up with a little over 5.000 products with the following features:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/mlflow-quickstart/processed-data-excerpt.webp&quot; alt=&quot;Processed Data Excerpt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this data, we can start running models for the sales column. Keep in mind not all the features in the picture above will be used. I’ll be using a simple Linear Regression as a baseline for comparison with other models (and to help show the power of MLflow down the road).&lt;/p&gt;

&lt;h2 id=&quot;using-mlflow&quot;&gt;Using MLflow&lt;/h2&gt;
&lt;p&gt;MLflow can be installed as a library in your pip or conda environment. So you can bring up a terminal and run:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mlflow

&lt;span class=&quot;c&quot;&gt;# or, if using Anaconda/Miniconda:&lt;/span&gt;

conda &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; conda-forge 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ll be using sklearn. I can simply import mlflow to use it in my code. With it imported I can use the following logic to track my models:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Other imports #
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autolog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;### Data ingestion ###
### Sklearn stuff ###
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Baseline Model
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mean_squared_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mae&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mean_absolute_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r2_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Logging Baseline Linear Regression Results&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log_metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Neg. RMSE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Neg. MAE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: keep in mind that MLflow has .autolog() methods for common flavors, but they work best up to certain versions. Check if your lib version is fully supported by autolog, if you’re going to use it. It won’t break your code necessairly, but it can lead to problems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I associate the code to my experiment with my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow.autolog()&lt;/code&gt; call. It automatically identifies I’m using sklearn (but I could use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow.sklearn.autolog()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then, I use a context to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow.start_run()&lt;/code&gt; to start a run in the experiment. The run in the snippet above is for the baseline &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LinearRegression()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you opt to start a run outside of a context, just make sure you end the run explicitly after.&lt;/p&gt;

&lt;p&gt;By calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fit()&lt;/code&gt;, MLflow automatically identifies the command and logs training metrics. I will also manually log using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow.log_metrics()&lt;/code&gt;. Within that run the Negative RMSE, Negative MAE and R2 scores are logged. This is done to enable comparison with test performance with other models.&lt;/p&gt;

&lt;p&gt;The reason to use Negative RMSE and MAE and not their positive (and most usual) counterparts is that I want to perform Hyperparameter Tuning with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GridSearchCV&lt;/code&gt;. To work within the search, these metrics need to be negative.&lt;/p&gt;

&lt;p&gt;For the GridSearch, we use the same block used for the Linear Regression. The only change is to call the Cross Validation object instead of the model when we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fit()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.predict()&lt;/code&gt;. MLflow will automatically handle what happens on the backend and will log the runs apropriately for the CV case.&lt;/p&gt;

&lt;h2 id=&quot;tracker&quot;&gt;Tracker&lt;/h2&gt;
&lt;p&gt;Now, let’s see how this looks after running in the mlflow UI. To start it just bring up a terminal window in the environment you have it installed and type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mlflow ui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will prompt you with a local IP adress where the UI was served to. You can open it in your browser to find the following page:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/mlflow-quickstart/mlflow-ui.webp&quot; alt=&quot;MLFlow UI&quot; /&gt;
Initial screen of MLflow&lt;/p&gt;

&lt;p&gt;After running the models this is what we have. On the left, we have a list with all experiments. In this case we only have one called “Default” (automatic name assigned by MLflow, you can change it).&lt;/p&gt;

&lt;p&gt;Using mlflow with autolog out of the gate will associate the runs to this experiment. You can build different experiments in the ui or through the API within the code.&lt;/p&gt;

&lt;p&gt;On the right, we have a list of all of our runs. Each run gets one of the assigned names. One for the baseline model (ambitious-carp), one for the 3 other models I’ve used, these with Hyperparameter Tuning.&lt;/p&gt;

&lt;p&gt;Notice how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GridSearchCV&lt;/code&gt; objects will have a “+” to their left. If we expand, we will have the &lt;strong&gt;5 best performing combinations in the GridSearch!&lt;/strong&gt; The top-level run, that encapsulates all the other runs, will be the best estimator. This would be equivalent to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.best_estimator_&lt;/code&gt; call within sklearn.&lt;/p&gt;

&lt;p&gt;Now with the models tracked, using the chart tab, we can can visually answer 2 questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do the models outperform the baseline?&lt;/li&gt;
  &lt;li&gt;Which model performed the best?&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/mlflow-quickstart/metric-graph.webp&quot; alt=&quot;Metric Graph&quot; /&gt;
Example of Metric Graph by Run in MLflow&lt;/p&gt;

&lt;p&gt;Using the Negative MAE as example, we can see one of the strenghts of MLflow. All of our models, even the ones with tuned hyperparameters, can be easily compared side by side for any of the metrics we logged.&lt;/p&gt;

&lt;p&gt;This view enables us to answer both questions above. We do actually outperform de baseline (last deep-red bar), and we see that the second model (name: unequaled-horse) is the one that performs the best. This is true for all 3 metrics we’ve tracked.&lt;/p&gt;

&lt;p&gt;Let’s then take a deeper look into the best model by simply clicking on its name on the list. We will this way access the second component.&lt;/p&gt;

&lt;h2 id=&quot;model&quot;&gt;Model&lt;/h2&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/mlflow-quickstart/model-page.webp&quot; alt=&quot;Metric Graph&quot; /&gt;
Detail of a run&lt;/p&gt;

&lt;p&gt;This is the page that describes a run, that contains a model object. Notice how it has a lot of attributes: The data used to train and evaluate it, the parameters, the metrics tracked and the artifacts.&lt;/p&gt;

&lt;p&gt;The “artifacts” section is what actually holds the model container. MLflow shows us how is the schema for the data used in the model and how we call the model to make predictions, with code snippets. We will do that just in a bit.&lt;/p&gt;

&lt;p&gt;First, I will register the model to see how the &lt;strong&gt;Model Registry&lt;/strong&gt; works. We can register a model by simply clicking on the “Register Model” button and giving it a name. After it’s registered, we can access the “Models” tab in the UI.&lt;/p&gt;

&lt;h2 id=&quot;registry&quot;&gt;Registry&lt;/h2&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/mlflow-quickstart/registry-page.webp&quot; alt=&quot;Registry Page&quot; /&gt;
Details of a registered model&lt;/p&gt;

&lt;p&gt;The initial screen of the registry will be a list of the &lt;strong&gt;registered&lt;/strong&gt; models and their names. By clicking on a model, the screen above pops up.&lt;/p&gt;

&lt;p&gt;Notice how a model will have versions. The first version we generate is, naturally, Version 1. To generate a second version of a model, just log a model with the same name it has in the registry.&lt;/p&gt;

&lt;p&gt;We can also add a description and information about who generated it. But what is really interesting here, along with the versioning possibilities, is the “Stage” tag.&lt;/p&gt;

&lt;p&gt;With it, we can assign if a model is in Staging or Production phase. To change it, we simply click on the version we want to edit and select the correspondent stage. Notice how we also have the schema, source run info and also tags we can associate to our model. I’ll put my model on “Staging”.&lt;/p&gt;

&lt;p&gt;It’s also worth to notice that changing the stage will trigger some actions in MLflow. For instance, when we transition a model to “Staging” a prompt shows up asking if you want that other models that get to “Staging” go to “Archived”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/mlflow-quickstart/model-versioning.webp&quot; alt=&quot;Model Versioning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trasitioning registered model version to Staging
With our model registered, we can call it easily to predict on data.&lt;/p&gt;

&lt;h2 id=&quot;calling-a-model&quot;&gt;Calling a Model&lt;/h2&gt;
&lt;p&gt;To call a model you need to basically pass a URI string to mlflow. There are many options to do so, I chose one that seemed the most clean and intuitive to me. Feel free to check out other options on the &lt;a href=&quot;https://mlflow.org/docs/latest/api_reference/python_api/mlflow.sklearn.html#mlflow.sklearn.load_model&quot;&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To call my model to predict on data, I can simply do:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;models:/dt_amz_prices/staging&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Given that the data corresponds to the Schema in the model
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the trained model will run. That’s it. MLflow enables us to easily compare, share, store and use a lot different models for any given ML problem.&lt;/p&gt;

&lt;p&gt;This has been, of course, a simplified scenario that I used to grasp how its basic functions work. We could, very easily, also serve this registered model as an API. However, this is beyond the scope of this text.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;This text is a product of my personal studies to understand MLflow. I’ve used it to solve a quite simple ML problem. This was done as a way to understand how its functionalities help Data Scientists experiment in a more orderly and structured fashion.&lt;/p&gt;

&lt;p&gt;I’ve covered 3 of the 5 components of the tool and tried out how they can be used in a project setting. In my honest opinion, MLflow is something I am strongly considering to adopt as a standard for my own work. This is because of the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Structure: I can test various models, with various configurations really easily, in a ordered way that I know where what is;&lt;/li&gt;
  &lt;li&gt;Easy comparability between runs: I don’t have to build extra layers of code to keep track and compare all the experiments I run. The chart mode helps a lot for model selection and comparison;&lt;/li&gt;
  &lt;li&gt;Replicability: It’s easy to call any model, not only the registered, without the fuss of opening other files and replicating the code (given the data preprocessing is the same);&lt;/li&gt;
  &lt;li&gt;Transparency : At all times we can look at parameters, features, inputs, outputs and artefacts from every model. If in a team setting you can see who did what;&lt;/li&gt;
  &lt;li&gt;UI: The UI is a major facilitator. It is clean, simple and self explanatory. This helps a lot to navigate problems with many possible solutions.
I hope this text helped you understand the main strenghts I’ve come to experience using MLflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;acknowledgements-and-links&quot;&gt;Acknowledgements and links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;For the full code of the project, check out my Repo on &lt;a href=&quot;https://github.com/bglucca/test_mlflow&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out the &lt;a href=&quot;https://mlflow.org/docs/latest/index.html&quot;&gt;&lt;strong&gt;MLflow docs&lt;/strong&gt;&lt;/a&gt; for further and more in-depth information.&lt;/li&gt;
  &lt;li&gt;The data for the project came from this dataset on Kaggle.
If you liked the text, leave some claps, a comment and feel free to check out my personal page &lt;a href=&quot;https://bglucca.github.io&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

		</content>
		
		<author>
			<name>Lucca Bevilacqua</name><uri>https://github.com/bglucca</uri></author>
		<summary type="html">&lt;p&gt;If you’ve been working with Data Science I’m sure that at some point you needed to try a lot of different things to solve a problem. At the same time, you also needed to keep track of the performance of what you tried to do.&lt;/p&gt;
</summary>
		<category term="posts"/>
		<category term="MLFlow"/><category term="MLOps"/><category term="Monitoring"/>
	</entry><entry>
		<title type="html">You’ve got mail! Machine Learning for Customer Segmentation.</title>
		<link href="https://bglucca.github.io/20230807_customer-segmentation/" rel="alternate" type="text/html" title="You’ve got mail! Machine Learning for Customer Segmentation."/>
		<published>2023-08-07T00:00:00+00:00</published>
		<updated>2023-08-07T00:00:00+00:00</updated>
		<id>https://bglucca.github.io/20230807_customer-segmentation/</id>
		<content type="html" xml:base="https://bglucca.github.io/20230807_customer-segmentation/">
		
		
		&lt;h3&gt;Using Data Science to better understand the customers for a mail-order company and predicting their marketing actions’ response.&lt;/h3&gt;
		
  		
			&lt;img src=&#39;https://bglucca.github.io/assets/img/customer-segmentation/cover-image.webp&#39; &gt;
			
	&lt;p&gt;26 min.&lt;/p&gt;
			&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#who-should-i-reach-out-to-and-where-arethey&quot; id=&quot;markdown-toc-who-should-i-reach-out-to-and-where-arethey&quot;&gt;Who should I reach out to? And where are they?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#initial-eda&quot; id=&quot;markdown-toc-initial-eda&quot;&gt;Initial EDA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#building-customer-segmentation&quot; id=&quot;markdown-toc-building-customer-segmentation&quot;&gt;Building Customer Segmentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#predicting-customerresponse&quot; id=&quot;markdown-toc-predicting-customerresponse&quot;&gt;Predicting Customer Response&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusions&quot; id=&quot;markdown-toc-conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer: This article and data for the development of the code are part of my submission Udacity’s Data Science Nanodegree program.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;who-should-i-reach-out-to-and-where-arethey&quot;&gt;Who should I reach out to? And where are they?&lt;/h2&gt;
&lt;p&gt;These are common questions to every sort of business. Especially B2C companies that reach out directly to consumers. Thankfully, Data Science can help us better pinpoint the niches within possible markets/ population.&lt;/p&gt;

&lt;p&gt;In this specific article, we will be covering data for Arvato-Bertelsmann. The data provided belongs to a mix of german general population demographic data and data from one of the company’s clients: an organics mail-order comapny.&lt;/p&gt;

&lt;p&gt;This is a two-part analysis. The first part will be an unsupervised cluster generation and interpretation of the census data vs current customers. This helps us understand &lt;strong&gt;which characteristics better define our customer base.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The second part will be a supervised learning problem to predict responses to marketing actions. This can help us predict which people have the highest probability of becoming customers after marketing efforts.&lt;/p&gt;

&lt;p&gt;To answer these questions, we have 4 tables:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2 .csv files with demographic data. One is the general population data, the other is the customer base.&lt;/li&gt;
  &lt;li&gt;2 other .csv files with the Mailout information. One is the training data and the other was supposed to be the test data. But for this article, only the training data will be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: The test data for mailout information was supposed to be used as part of a Kaggle competition entry that no longer exists. This is why only the training data was used, since it has labels for scoring and model evaluation.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There were also 2 auxiliary tables that represented a documentation regarding the available variables and how to interpret the encodings of categorical variables.&lt;/p&gt;

&lt;p&gt;All files use “;” as the separator between values.&lt;/p&gt;

&lt;p&gt;An observation at stage is necessary: Due to terms and conditions of the data, the data cannot be shared and thus will not be found anywhere except within the Udacity Data Science Nanodegree context.&lt;/p&gt;

&lt;p&gt;With all the context set, lets get into the analyses. The methodology is the following: We first do an Exploratory Analysis of the Data and check for its consistency. This way, we can define any preprocessing steps to get the best out of our data.&lt;/p&gt;

&lt;p&gt;Then, we go to the unsupervised stage, where we try to build segments that might help us understand the companies customer base.&lt;/p&gt;

&lt;p&gt;At last, we move to the modelling, where we attempt to build a model to predict wether a person answers to a mailout campaign or not.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before we continue, this article is also available on my &lt;a href=&quot;https://medium.com/@luccagomes/youve-got-mail-machine-learning-for-customer-segmentation-2c90d9b9d58d&quot;&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/a&gt;, if you like it better&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;initial-eda&quot;&gt;Initial EDA&lt;/h2&gt;
&lt;p&gt;The general census data contains 891221 rows by 366 columns. The variables are divided into different groups, where each one means a different thing. For instance there is a group regarding automobile ownership information, other blocks regard the surroundings of the respondent.&lt;/p&gt;

&lt;p&gt;The rows represent one respondent’s responses. Each respondent is represented by an anonym ID called “LNR” in the database.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;fixing-cameo_columns&quot;&gt;Fixing CAMEO_ columns&lt;/h3&gt;
&lt;p&gt;There are 3 columns in the data (&lt;em&gt;CAMEO_DEUG_2015, CAMEO_INTL_2015 and CAMEO_DEU_2015&lt;/em&gt;) that raise a warning about mixed types in Data. This happens because the values “X” or “XX” show up on them, when they should be numeric types (&lt;em&gt;int&lt;/em&gt; or &lt;em&gt;float&lt;/em&gt;). Since there is no description on the documentation of what these values are supposed to be and since they are different to the possible values in the columns, they were replaced as NaNs.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;fixing-documentation-removing-undocumented-columns&quot;&gt;Fixing Documentation - Removing undocumented columns&lt;/h3&gt;
&lt;p&gt;Another problem found was that not all columns were in the documentation, on either of the two auxiliary files. This generated 3 scenarios:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The naming of the column was incorrect, but it was in fact documented (salvageable);&lt;/li&gt;
  &lt;li&gt;The column name was self-explanatory enough to be associated to other columns that had similar encodings and names (salvageable);&lt;/li&gt;
  &lt;li&gt;The column was, effectively, missing from the documentation (unsalvageable).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most critical case would be the last one. When we don’t have a clear meaning to the feature we can’t assure its usefullness. Therefore, columns considered unsalvageable were dropped.&lt;/p&gt;

&lt;p&gt;The steps taken to set the not found columns were:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Get column names not in the documentation&lt;/li&gt;
  &lt;li&gt;A first automatic attempt to match columns by appending common strings to the names&lt;/li&gt;
  &lt;li&gt;A second manual verification to see if the names coincide heavily with other columns in the docs and, therefore, we can infer the meaning of the not found columns.&lt;/li&gt;
  &lt;li&gt;The columns not found after these two steps, were dropped.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;31 columns were dropped by this process.&lt;/p&gt;

&lt;p&gt;Also, with the documentation now fully representing the data, the files could be used to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Correlate the column names to their data types (float, int,…) and variable type (numeric, interval, nominal or binary)&lt;/li&gt;
  &lt;li&gt;Correlate the column names to the variable group they belonged to&lt;/li&gt;
  &lt;li&gt;Correlate the column names to their respective NaN values that could be encoded differently&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To build these correlations, especially variable type, changes were made manually to the files or new files were created in a format that made fetching the documentation’s information in an easier manner.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;nan-handling&quot;&gt;NaN Handling&lt;/h3&gt;
&lt;p&gt;Given the (now fixed) documentation on the value of the columns, we can extract information from the documentation to replace values that map from “unknown” to NaN.&lt;/p&gt;

&lt;p&gt;By ingesting this information and considering that strings that contain “unknown” in the meaning of the encoding represent NaNs, we can build a dictionary for each column to map its corresponding NaN values using pandas’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.replace()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fillna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ffill&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Assuming, from manual inspection from the &#39;Values&#39; Spreadsheet, that NaNs are represented with substrings in Meaning col
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nan_val_df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Meaning&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;na&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nan_val_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nan_val_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nan_val_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nan_val_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nan_val_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nan_val_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nan_val_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Reshaping the dictionary for .replace
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nested_nan_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nan_val_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nested_nan_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nan&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Mapping values to NaN
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;census&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;census&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nested_nan_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;column-elimination-nan-proportion&quot;&gt;Column Elimination - NaN Proportion&lt;/h3&gt;
&lt;p&gt;After mapping the NaNs to each column, we can check for high incidence of NaNs column-wise.&lt;/p&gt;

&lt;p&gt;Columns with a high percentage of NaN values can be discarted because they probably do not provide any sort of valuable information regarding the general properties of the population, which makes building inferences/ insights around them risky.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/customer-segmentation/column-nan-proportion.webp&quot; alt=&quot;NaN Proportion&quot; /&gt;
Columns with a proportion of NaNs above the threshold, would be dropped.&lt;/p&gt;

&lt;p&gt;Columns with a proportion of NaNs above the threshold, would be dropped.The proportion threshold is a somewhat arbitrary definition. The plot above helps us understand the reasoning to why select 30% as the maximum threshold to drop a column.&lt;/p&gt;

&lt;p&gt;If a threshold of proportion of NaNs ≤ 30% is chosen, we drop 9 columns that do not meet this criterion and manage to retain other columns in which we can impute values. Having in mind that the amount of columns that would be dropped if a 50% threshold was selected is 8 and that the cut for 20% might be too conservative, 30% was deemed as an appropriate cut.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;numeric-variables-distributions&quot;&gt;Numeric Variables Distributions&lt;/h3&gt;
&lt;p&gt;With unused columns dropped and types appropriately fixed, we can look into some of the distributions to get some insight on the variables.&lt;/p&gt;

&lt;p&gt;Broadly speaking, the numerical variables either needed no transformations or required to be binarized. One variable needed to be dropped.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;In general, numerical variables are left-skewed as shown below:
&lt;img src=&quot;/assets/img/customer-segmentation/box-plot.webp&quot; alt=&quot;NaN Proportion&quot; /&gt;
Box-Plot of numerical distributions’ examples&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The fliers (dots beyond whiskers) were ommitted to help the visualization&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Two variables needed to be binarized: ANZ_HH_TITEL and ANZ_KINDER. This was because they had, respectively, &lt;strong&gt;86.43%&lt;/strong&gt; and &lt;strong&gt;82.05% of zeroes in them&lt;/strong&gt;. On top of that, both of them showed a dominance in low discrete values. These aspects makes it really hard to consider these variables as numeric when approaching any problem. Therefore, they were binarized to represent wether or not they had that attribute.&lt;/p&gt;

&lt;p&gt;GEBURTSJAHR was the dropped variable. It had 44.02% of YoB as 0. Therefore, from every 10 answers, 4 wouldn’t have a YoB. Since we also have a variable that represents the age category of the respondents (ALTERSKATEGORIE). This variable was dropped.&lt;/p&gt;

&lt;p&gt;The binarization occurred on the preprocess stage, which will be covered in the coming section.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;categorical-variables-distributions&quot;&gt;Categorical Variables Distributions&lt;/h3&gt;
&lt;p&gt;Categorical variables were more looked into especially for the interval variables. Some variables presented too many categories that not necessairly were informative, such as below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/customer-segmentation/cat-var-plot.webp&quot; alt=&quot;Categorical variable distribution example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Taking the example above, the consumption variable for banking shows how the answers gravitate between the 0, 3 and 6 values. Accounting other categories could make the space of options too sparse and the combinations of variables would make it even sparser. Keep in mind that there are 36 columns like the one showed above just for its group.&lt;/p&gt;

&lt;p&gt;So the next step was to identify the columns that showed this sparsity and reduce it by reducing the number of bins. This affected mainly columns from 2 groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;125 x 125 Grid columns (case illustrated above): from 7 categories, reduced to 4&lt;/li&gt;
  &lt;li&gt;D19 columns in the “Household” group: 3 types of columns were identified which had respectively 10, 7 and 10 groups that were reducet to 3, 4 and 3 possible values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The specifics of these alterations will be covered below in the “Preprocessing” stage&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;cleaning-the-data-defining-preprocessing-steps&quot;&gt;Cleaning the Data - Defining Preprocessing Steps&lt;/h3&gt;
&lt;p&gt;The approach for defining the preprocessing will use as baseline the general population demographic data. This is to ensure that no bias from the customer base or mailout base affect the conclusions or steps taken to clean the data.&lt;/p&gt;

&lt;p&gt;The idea is that cleaning steps that apply to the general population, should apply to its subsets since the same variables are present across all files and that all the files are technically a subset of the general population.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;dropping-emptyrows&quot;&gt;Dropping empty rows&lt;/h4&gt;
&lt;p&gt;Rows that are filled with too many NaNs mean that they might be rows with a lot of imputation. What this results is that we will have rows in which a person might be described a lot by general values of the variables (mean, median, mode, etc.). This automatically might deliver bias to our analysis.&lt;/p&gt;

&lt;p&gt;The individuals with highly imputed responses will actually be an “average” (or other imputed value of choice) of all variables. This assumption is not reasonable if most of the data of that response isn’t from that person. We would end up having some “average” individuals&lt;/p&gt;

&lt;p&gt;The graph below shows a distribution of amount of rows by proportion of data missing in them. Notice how approximately 10% of the data (orange shaded area) has more than half of their information compromised by NaN values.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/customer-segmentation/distribution-nan-proportion.webp&quot; alt=&quot;Distribution NaN Proportion&quot; /&gt;
Distribution of proportion of NaN values in the data’s rows&lt;/p&gt;

&lt;p&gt;Considering the information the graph displays, rows with more than 30% of its data missing will be discarted.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;re-encoding-the-relevant-numerical-variables-tobinary&quot;&gt;Re-encoding the relevant numerical variables to binary&lt;/h4&gt;
&lt;p&gt;As noted in the ETL, some numerical variables had to be encoded to binary. Using a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;np.where&lt;/code&gt; is enough to encode the variables the way we need them to.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;fixing-objectcolumns&quot;&gt;Fixing Object columns&lt;/h4&gt;
&lt;p&gt;Some columns are in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; format. This is not inherently a problem. But some columns could benefit from not being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The OST_WEST_KZ is actually a binary column&lt;/li&gt;
  &lt;li&gt;The CAMEO_DEU_2015 column could be interpreted as an interval variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fix to OST_WEST_KZ is straightfoward, the column values were mapped to 0 and 1. The CAMEO_DEU_2015 column had 1 integer value mapped to each one of the columns’ possible values. The smaller integer values account for the higher income classifications, the higher account for the lower incomes.&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;imputations&quot;&gt;Imputations&lt;/h4&gt;
&lt;p&gt;The imputation strategy used was separated in two:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Mode for any categorical variable (interval, nominal or binary variables)&lt;/li&gt;
  &lt;li&gt;Mean for numerical&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;reencoding-d19columns&quot;&gt;Reencoding D19 Columns&lt;/h4&gt;
&lt;p&gt;As mentioned in the ETL stage, some columns that start with the “D19” prefix could be reencoded after inspecting their distributions to reduce sparsity in the categories. This led to 4 reencodes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Columns from the “125 x 125 Grid” that refered to consumption frequency of a group of goods. They were re-encoded into 4 groups: No transactions, consumed within 12 months, consumed within 24 months and Prospects (&amp;gt; 24 months)&lt;/li&gt;
  &lt;li&gt;Columns from the “Household” that refered to the actuality of the last transaction: Activity within the last 12 months, activity older than 12 months, no activity&lt;/li&gt;
  &lt;li&gt;Columns from the “Household” that refered to the transaction activity in the last months (12 or 24): No transactions, low activity, increased activity, high activity&lt;/li&gt;
  &lt;li&gt;Columns from the “Household” that refered to the percentage of transactions made online: 0% online, 100% online, mixed online-offline (values between 0% and 100%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All re-encodes were made assigning an int value to each category but always mantaining the logical order of the variable. This was made so that the variables could be interpreted as interval and not simple nominal variables, since they contain an inherent order.&lt;/p&gt;

&lt;p&gt;After the ETL and Preprocessing notebooks, all relevant steps were turned into a .py file so that all steps could be equally applied across all files.&lt;/p&gt;

&lt;h2 id=&quot;building-customer-segmentation&quot;&gt;Building Customer Segmentation&lt;/h2&gt;
&lt;p&gt;With the data now cleaned and preprocessed, we can start building our segmentation. This part uses the general census data and the consumer census data. The question we want to answer at this stage is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do the possible consumers find themselves in specific segments of the general population?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a more technical fashion: &lt;strong&gt;Given the existance of clusters in the general public data, can the consumers be found more often in specific clusters?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;strategy-approaching-theproblem&quot;&gt;Strategy - Approaching the problem&lt;/h3&gt;
&lt;p&gt;Given the main question at this stage, the approach had to cover (mainly):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A Dataset with a high amount of features (300+, possibly more after One-hot encoding the nominal variables);&lt;/li&gt;
  &lt;li&gt;A Dataset with mixed-typed data (categorical and numerical);&lt;/li&gt;
  &lt;li&gt;A Dataset with a high amount of rows (~800.000 on the general population data);&lt;/li&gt;
  &lt;li&gt;Establish a comparison between general population and consumers, given the clusters formed around general population data. Consumer data should not “leak” to form the clusters, since we aim to build clusters around the general population and see how the consumer data “fits” into this reality.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To solve the 1. topic, we would usually go with using a dimensionality reduction method such as PCA. However, given the constraint of the mixed data (topic 2.), &lt;strong&gt;we should not use PCA&lt;/strong&gt;. Using PCA directly on a mixed-data context, would not generate mathematically correct (and thus interpretable) results.&lt;/p&gt;

&lt;p&gt;We can look use alternative approaches such as Factorial Analysis of Mixed Data (FAMD). This approach is a form of generalizing Factorial Analysis to a mixed-data setting. The result is similar to PCA. For a more technical and in-depth look into the strategy &lt;a href=&quot;https://towardsdatascience.com/famd-how-to-generalize-pca-to-categorical-and-numerical-data-2ddbeb2b9210/&quot;&gt;&lt;strong&gt;this article&lt;/strong&gt;&lt;/a&gt; explains the theory and implementation of the method.&lt;/p&gt;

&lt;p&gt;FAMD outputs something similar to PCA. This covers the first two main points, handling the amount of features and mixed data. Now for the last two, the solution is pretty straightfoward.&lt;/p&gt;

&lt;p&gt;To enable our model to train clusters on the general population and to assign them to the consumer base, we can use clustering methods that will generate centroids. This makes it possible to assign customers to the nearest centroids of the general population. This works because customer data will have the same features as the general population table.&lt;/p&gt;

&lt;p&gt;Considering the output of FAMD is a fully numerical table, we can use the well-known K-Means algorithm. But since we need to process 800k + rows across hundreds of columns (which might make some setups runs a little slow), we can use sklearn’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster.MiniBatchKMeans&lt;/code&gt; that handles confortably the amount of data to give us the results we need.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;famd&quot;&gt;FAMD&lt;/h3&gt;
&lt;p&gt;To get the data ready for the FAMD, we create a function to basically One-Hot Encode nominal variables, and weigh these variables accordingly. We also use sklearn’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StandardScaler&lt;/code&gt; to handle the numerical attributes accordingly. For this work, interval variables will be considered as numerical attributes and will be handled like numericals.&lt;/p&gt;

&lt;p&gt;The FAMD approach used is a manual one (find more about it in the article linked in the previous section). This means that after applying these transformations, we use PCA on the transformed data. The preprocessed data for FAMD, in the end, ends up with 396 features.&lt;/p&gt;

&lt;p&gt;So to select the amount of Components we will have, we define an acceptable threshold for the amount of variance we want to keep and then make the transformations. The graph below shows that for a threshold of 95% of variance, selecting 225 components satisfy this criterion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/customer-segmentation/explained-variance.webp&quot; alt=&quot;Explained Variance by Number of Components&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Starting from a higher amount of components and following with bigger steps was a deliberate approach to save processing time.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;mini-batchk-means&quot;&gt;Mini Batch K-Means&lt;/h3&gt;
&lt;p&gt;With the transformed data after the FAMD process, we can train the Mini Batch K-Means algorithm and use the elbow method to choose an appropriate amount of clusters:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/customer-segmentation/elbow-plot.webp&quot; alt=&quot;Elbow plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the graph above, we could select k = 14 as a reasonable amount of clusters for our problem.
With the trained FAMD and K-Means objects trained on the overall census data, we now use them on the customer data to then classify data from both files to clusters.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;adjusting-customerdata&quot;&gt;Adjusting Customer Data&lt;/h3&gt;
&lt;p&gt;To use customer data as intended, we run the same preprocessing we did for the general data and then we will simply use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.transform()&lt;/code&gt; from the PCA object and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.predict()&lt;/code&gt; from the model, both fitted on general population data, to use the customer data.&lt;/p&gt;

&lt;p&gt;Neither the PCA or model are re-fitted on customer data to avoid that the customer’s characteristics, which could be differently distributed than the general population, affect the estimates of the cluster centroids or generates Components different from the general population. We want to classify customers according to general population groups and not to consider them jointly.&lt;/p&gt;

&lt;p&gt;The code to reuse the customer data with the objects trained on general data will look, generally, like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;customers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_parquet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUSTOMER_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Preprocessing function
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prep_data_famd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nominal_vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary_vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Dropping specific columns that aren&#39;t used in clustering
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_cust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;LNR&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CUSTOMER_GROUP&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ONLINE_PURCHASE&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;PRODUCT_GROUP&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Are there columns that do not match between the frames?
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;na_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;census&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Categories not in customer data but are in census: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;na_cols&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;na_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;X_cust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;census&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;LNR&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_cust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;X_cust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_cust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;census&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;LNR&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Order needs to be the same
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Assigning clusters to responses
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmeans_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_cust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;census&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kmeans_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;results&quot;&gt;Results&lt;/h3&gt;
&lt;p&gt;This process gives us the following distribution in each dataset of responses for k = 14 clusters:
&lt;img src=&quot;/assets/img/customer-segmentation/customer-clustering-results.webp&quot; alt=&quot;Customer Clustering&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are clear differences in some clusters! We can see clusters that clearly contain more customer responses than general population responses. Especially the 1, 6, 8, 9 and 11 clusters are clusters that contain a higher proportion of customers.&lt;/p&gt;

&lt;p&gt;This already gives us an insight: &lt;strong&gt;If we want to find new customers similar to the current customer base, we should target the clusters with a notably larger proportion of responses then the general population. I.e. the clusters mentioned above.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can go one step further and dig a little bit deeper on the interpretation of the clusters. We will first understand around which components the cluster is more heavily centered around and then look a little into some of the main variables that compose the component.&lt;/p&gt;

&lt;p&gt;Let’s take the cluster 11 as an example, since it contains the highest overall proportion of customers in it. More specifically, let’s look into the 3 main components of the cluster.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/customer-segmentation/cluster-11-components.webp&quot; alt=&quot;Cluster 11 main components&quot; /&gt;
Main components for cluster 11&lt;/p&gt;

&lt;p&gt;The cluster is heavily centered at high values in the 0 component, backed up by other components. Here, only the 3 top components will be shown for brevity and as to draw a concrete example of interpretation of the information. But, this analysis could be extended to how many components we would like and all clusters.&lt;/p&gt;

&lt;p&gt;Let’s look at the top 10 features in each component 0, 3 and 1:&lt;/p&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;component-0&quot;&gt;Component 0&lt;/h4&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/customer-segmentation/comp-0-main-feat.webp&quot; alt=&quot;Component 0 main features&quot; /&gt;
Main features in Component 0&lt;/p&gt;

&lt;p&gt;For component 0 we can draw that it has a heavy weight on Economic Class (CAMEO_DEUG_2015, CAMEO_DEU_2015) and distance to nearest city centre (BALLRAUM). Both indicators are &lt;strong&gt;inversely proportional&lt;/strong&gt; to the weight of the component.&lt;/p&gt;

&lt;p&gt;These features are interval variables. They have an interpretation that the bigger their value, the &lt;strong&gt;lower the income&lt;/strong&gt; (for CAMEO_… columns) or the &lt;strong&gt;farther from the center&lt;/strong&gt; the respondent is (BALLRAUM).
In, general, this component could refer to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;indiviual income&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;distance to urban centers.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;component-3&quot;&gt;Component 3&lt;/h4&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/customer-segmentation/comp-3-main-feat.webp&quot; alt=&quot;Component 3 main features&quot; /&gt;
Main features in Component 3&lt;/p&gt;

&lt;p&gt;Component 3 seems more balanced in terms of feature impact that component 0. However, a lot of the variables in the component are from the same group (&lt;em&gt;SEMIO_…&lt;/em&gt;) and we have a big contribution of the &lt;em&gt;KONSUMNAEHE&lt;/em&gt; variable. The component is proportional to this variable. The bigger its value, the further the respondent is from Point of Sale (PoS).&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;SEMIO_&lt;/em&gt; variables refer to the mindset of the respondent. Note that the &lt;em&gt;SEMIO_FAM&lt;/em&gt; variable has an opposite signal on the effect than the other &lt;em&gt;SEMIO_&lt;/em&gt; variables. This means in practice that the component grows proportionally to &lt;em&gt;SEMIO_FAM&lt;/em&gt;, but grows inversely proportionally to the others.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;SEMIO&lt;/em&gt; variables have highest affinities (stronger mindset) on lower values. So, for this component, the higher the family mindset, more positive is the component. But, the higher the other mindsets, the more negative it is.&lt;/p&gt;

&lt;p&gt;There are also the &lt;em&gt;RELAT_AB&lt;/em&gt; and &lt;em&gt;MOBI_REGIO&lt;/em&gt; variables, that are about unemployment rates on the surroundings of the respondents and mobility profile of the respondent.&lt;/p&gt;

&lt;p&gt;Therefore, we can say that this component refers to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The geographical distance of the respondent to a PoS, and;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The mindset (affinities) of the respondent, towards some themes.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;And has some relation to the respondents’ surroudings employment rates and their mobility profile&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;component-1&quot;&gt;Component 1&lt;/h4&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/customer-segmentation/comp-1-main-feat.webp&quot; alt=&quot;Component 1 main features&quot; /&gt;
Main features in Component 1&lt;/p&gt;

&lt;p&gt;Component 1 shows a heavy contribution of the &lt;em&gt;PLZ_HHZ&lt;/em&gt; variable, being inversely proportional to it. We can also see that other &lt;em&gt;SEMIO_&lt;/em&gt; Features contribute to the component, as well as &lt;em&gt;FINANZ_&lt;/em&gt; and &lt;em&gt;CJT_&lt;/em&gt; variables.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HHZ&lt;/em&gt; is about housing density on the surroundings of the respondents. The higher the variable’s value, more dense is the region.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;FINANZ_&lt;/em&gt; variables are about how the respondent handles money (finances)&lt;/p&gt;

&lt;p&gt;CJT is about Customer Journey Tipology. This means how the customer behaves regarding advertisement consumption and types of Channels used for purchases.&lt;/p&gt;

&lt;p&gt;Therefore, we can infer that this component is about:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;If the respondent lives in densly populated regions;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How the respondents handle their finances (some attributes);&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How the respondents see the world (different themes than Component 3)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;And how they consume ads and which channels they use.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These examples are to illustrate how we could interpret these results towards understanding what is that drives certain clusters. Of course that transformation processes such as FAMD and PCA will add a complexity layer to the interpretation of these informations, since we will have compositions of original features being used.&lt;/p&gt;

&lt;p&gt;However, even so we can grasp to some extent what is that drives the components and, consequently, the clusters.
After the clustering, we move on the prediction of responses (interaction) to marketing campaigns.&lt;/p&gt;

&lt;h2 id=&quot;predicting-customerresponse&quot;&gt;Predicting Customer Response&lt;/h2&gt;
&lt;p&gt;At this stage we have a different question then that one posed in the segmentation stage:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we predict better then a naïve approach the customers that might or might not respond to marketing campaigns?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this task we will actually use the Test mailout dataset only. This is because its the only dataset that contains labels for predictions.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;strategy-approaching-theproblem-1&quot;&gt;Strategy - Approaching the problem&lt;/h3&gt;
&lt;p&gt;Differently from the segmentation phase, when we were handling with an unsupervised problem, now we have a Supervised Classification Machine Learning problem. This means we have labels that we can match correct predictions to. However, the dataset at hand has its specifities.&lt;/p&gt;

&lt;p&gt;The labels we are trying to predict come from a column named &lt;em&gt;RESPONSE&lt;/em&gt;. It is a binary target. 0 stands for no response, where 1 stands for a response by that individual.&lt;/p&gt;

&lt;p&gt;We need to keep in mind that we are dealing with an &lt;strong&gt;unbalaced target&lt;/strong&gt;. This means that the response variable is heavily populated by one of the values. This case, 0. The graph belows illustrates the situation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/customer-segmentation/dataset-unbalance.webp&quot; alt=&quot;Dataset unbalance plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In total, after preprocessing, we are left with 435 positive responses versus approx. 34.5k of negative (absence) responses. This means we have about a 1.2% response rate. The remaining 98.8% are people that didn’t respond to the campaign.&lt;/p&gt;

&lt;p&gt;It is important to keep in mind that for such an extreme unbalance &lt;strong&gt;accuracy is not an option for a good metric in this case.&lt;/strong&gt; It is a biased metric when we are handling unbalanced datasets.&lt;/p&gt;

&lt;p&gt;In short, it is very easy to get a good result for accuracy in an unbalanced setting, since &lt;strong&gt;it accounts both True Positives (TP) and True Negatives (TN) as successes&lt;/strong&gt;. For a more detailed explanation check &lt;a href=&quot;https://machinelearningmastery.com/failure-of-accuracy-for-imbalanced-class-distributions/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So we need a strategy that:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Handles unbalanced data;&lt;/li&gt;
  &lt;li&gt;Uses a metric that quantifies effectively the success of the model;&lt;/li&gt;
  &lt;li&gt;Performs better than a baseline naïve approach.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As to topic 1. we have some options. We can use methods that weigh the response variable according to its occurance or we can use artificial sampling methods like SMOTE or Downsampling, both available in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imblearn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Working always from the least to the most complex, testing with methods that weighed the response variable worked well. So this approach was selected.&lt;/p&gt;

&lt;p&gt;About topic 2. the solution proposed is using the well known &lt;strong&gt;Area Under the Curve for the ROC Operator (ROC-AUC score)&lt;/strong&gt;. This will take into consideration the occurance of the Recall (how many relevant instances we classified correctly) versus the False Positive Rate (how often we misclassified an instance as being a respondent, when it wasn’t).&lt;/p&gt;

&lt;p&gt;The third and final topic can only be known for certain known after modelling and comparing results to the test data. So, let’s get into it.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;modelling&quot;&gt;Modelling&lt;/h3&gt;
&lt;p&gt;To avoid Data Leakage (i.e. test data being used in training) and thus preventing that the model gets information from data it should not have, sklearn’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipeline&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;The approach selected for better handling the data unbalance was hyperparameter tuning. By default, a lot of algorithms have options to handle this kind of problem.&lt;/p&gt;

&lt;p&gt;For the problem at hand, 4 models were used:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Logistic Regression - Baseline value for comparison (simplest model)&lt;/li&gt;
  &lt;li&gt;Decision Tree&lt;/li&gt;
  &lt;li&gt;Random Forest&lt;/li&gt;
  &lt;li&gt;XGBoost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the first 3 models, there is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_weight&lt;/code&gt; parameter that sklearn has available for usage. For XGBoost, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scale_pos_weight&lt;/code&gt; was used to achieve a similar effect on the XGBoost API.&lt;/p&gt;

&lt;p&gt;Also, given that the problem had interval variables (categorical variables with an ordinal relationship) they were approached in two different ways: first, using them as numerical variables; second, using them as ordinal variables. For the first case, these variables were handled as numeric. For the second, they were handled by an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OneHotEncoder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In general, the numerical variables were Standardized because, although not needed by the methods, we would be able to test the models with regularization.&lt;/p&gt;

&lt;p&gt;Also, considering the unbalance, all Cross Validations for results were made with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StratifiedKFold&lt;/code&gt; to assure target balance.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;results-testdata&quot;&gt;Results - Test Data&lt;/h3&gt;
&lt;p&gt;We want to first compare what strategy we will use: encode or not the interval variables. This is because variables of this type are the majority of the data. How we use them can impact the results.&lt;/p&gt;

&lt;p&gt;Secondly, we want to see if the models we choose will have results good enough to justify Hyperparameter Tuning. We will compare the results from the other models to Logistic Regression performance.&lt;/p&gt;

&lt;p&gt;To start we split the train and test data. Then, setting up the pipelines with initial versions of the models, we run them &lt;strong&gt;only using the training data&lt;/strong&gt; inside cross_validation and evaluate the comparative performance of the models. The results are the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the interval variables being used as numeric:&lt;/strong&gt;
&lt;img src=&quot;/assets/img/customer-segmentation/model-perf-graph-case-1.webp&quot; alt=&quot;Model Performance Across folds - Interval variable are numeric&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/customer-segmentation/model-perf-avg-case-1.webp&quot; alt=&quot;Average model performance - Interval variable are numeric&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the interval variables being one-hot encoded&lt;/strong&gt;:
&lt;img src=&quot;/assets/img/customer-segmentation/model-perf-graph-case-2.webp&quot; alt=&quot;Model Performance Across folds - Interval variable are categorical&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/customer-segmentation/model-perf-avg-case-2.webp&quot; alt=&quot;Average model performance - Interval variable are categorical&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On a first glance, the models seem to overfit. However, we must consider we have a heavy unbalance at hand. So, what can actually be happening is that we don’t have enough samples to generalize well to test data. This means that this heavy difference of results could be result of the amount of available information.&lt;/p&gt;

&lt;p&gt;Also, on this first run, the models aren’t with any sort of hyperparameter tuning. This can heavily affect the results. Tree depth or regularization, for instance, are parameters that affect a lot these kinds of models.&lt;/p&gt;

&lt;p&gt;All the models outperform the Logistic Regression on test data.&lt;/p&gt;

&lt;p&gt;Also, the strategy of using interval variables as One Hot Encoded features seem to wield better results. However, the results are only slightly better. So, as a counterproof, we will run both strategies for all models to tune hyperparameters.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IMPORTANT: In this past section “test data” refers to a subset of training data!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we run the final models against the actual test data, we can assess if they actually overfit or yield bad results.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;hyperparameter-tuning&quot;&gt;Hyperparameter Tuning&lt;/h3&gt;
&lt;p&gt;With the results from before, we will do hyperparameter tuning for the Decision Tree, Random Forest and XGBoost in both cases of usage of the interval variables. The tuning took place with the following parameters:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dt_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT__max_depth&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
             &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT__min_samples_split&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
             &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DT__min_samples_leaf&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rf_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;RF__n_estimators&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
             &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;RF__max_depth&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;xgb_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XGB__n_estimators&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
              &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XGB__max_depth&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
              &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XGB__learning_rate&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
              &lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;XGB__alpha&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the tuning, only training data was used and the Stratified K-fold cross validation was kept.&lt;/p&gt;

&lt;p&gt;Mean AUC-Score results for the interval variables used as numerical:
&lt;img src=&quot;/assets/img/customer-segmentation/hyper-tuning-results-case-1.webp&quot; alt=&quot;Hyperparameter tuning results - Interval variable are categorical&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mean AUC-Score results for the interval variables used as categorical:
&lt;img src=&quot;/assets/img/customer-segmentation/hyper-tuning-results-case-2.webp&quot; alt=&quot;Hyperparameter tuning results - Interval variable are categorical&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the scores, we get that in general the variables used as categorical (One-Hot Encoded) yielded better results. However, the difference in results are still really close. To assure we don’t discard useful models, they will be tested on the test data to see their generalization power.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;final-run-results-on-testdata&quot;&gt;Final Run: Results on test data&lt;/h3&gt;
&lt;p&gt;Now, running the models with data never seen we can actually assess if there is indeed overfitting taking place or not. If the results on test data never seen is a lot lower than on the training stages, then overfiitting might be a possibility.
Results for the interval variables used as numerical:
&lt;img src=&quot;/assets/img/customer-segmentation/results-case-1.webp&quot; alt=&quot;Final Results - Interval variable are categorical&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Results for the interval variables used as categorical:
&lt;img src=&quot;/assets/img/customer-segmentation/results-case-2.webp&quot; alt=&quot;Final Results - Interval variable are categorical&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the results the model that best generalizes to the test data is the &lt;strong&gt;Random Forest with One-Hot Encoded interval variables&lt;/strong&gt;. We can also see that the results are similar to those obtained on the predictions over the training data. This points that the difference might not be necessarily overfitting, but actually the model’s capability to generalize well to the data at hand.&lt;/p&gt;

&lt;p&gt;However, the results point to a better performance when comparing any model to a naïve Logistic Regression.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;We can see that &lt;strong&gt;it was possible to predict the respondents using ML approaches successfully&lt;/strong&gt;. All models outperformed a naïve Logistic Regression baseline.&lt;/p&gt;

&lt;p&gt;The best model had the following variables as the most important for predicting results:
&lt;img src=&quot;/assets/img/customer-segmentation/feat-importance-preds.webp&quot; alt=&quot;Feature importance for predictions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can notice that informations regarding car ownership (KBA13&lt;em&gt;…) and some general counts of the households (ANZ&lt;/em&gt;…) appear often.&lt;/p&gt;

&lt;p&gt;From these results, we could potentially &lt;strong&gt;use this model to pinpoint which customers could be targeted by future marketing endeavors.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some improvements could be thought of for future development cycles such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Feature selection, removing highly correlated features to increase perfomance and reduce any redundancies the models might capture.&lt;/li&gt;
  &lt;li&gt;Rerunning the clustering with selected features. This might enable us to cluster without recurring to FAMD method and thus making the interpretation of the cluster easier.&lt;/li&gt;
  &lt;li&gt;Rerunning the models with more data available: given the unbalance, to improve the models generalization capabilities, using more data would be optimal to achieve substantially better results.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;thanks-forreading&quot;&gt;Thanks for reading!&lt;/h1&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/bglucca/ArvatoCustomerSegmentation/tree/main&quot;&gt;&lt;strong&gt;repo&lt;/strong&gt;&lt;/a&gt; for the project.&lt;br /&gt;
This article is also available on &lt;a href=&quot;https://medium.com/@luccagomes/youve-got-mail-machine-learning-for-customer-segmentation-2c90d9b9d58d&quot;&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;
If you have any feedback or just want to get in touch, DM on LinkedIn.&lt;/p&gt;

		</content>
		
		<author>
			<name>Lucca Bevilacqua</name><uri>https://github.com/bglucca</uri></author>
		<summary type="html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;
</summary>
		<category term="posts"/>
		<category term="Case Study"/><category term="Customer Segmentation"/><category term="Machine Learning"/><category term="Supervised Learning"/><category term="Unsupervised Learning"/>
	</entry><entry>
		<title type="html">Browsing AirBnb using Data Science</title>
		<link href="https://bglucca.github.io/20221112_rio-airbnb/" rel="alternate" type="text/html" title="Browsing AirBnb using Data Science"/>
		<published>2022-11-12T00:00:00+00:00</published>
		<updated>2022-11-12T00:00:00+00:00</updated>
		<id>https://bglucca.github.io/20221112_rio-airbnb/</id>
		<content type="html" xml:base="https://bglucca.github.io/20221112_rio-airbnb/">
		
  		
			&lt;img src=&#39;https://bglucca.github.io/assets/img/rio_airbnb/cover-image.jpg&#39; &gt;
			
	&lt;p&gt;7 min.&lt;/p&gt;
			&lt;p&gt;I consider myself somewhat of a regular traveler. That’s why I often look for places to stay in AirBnb. But, when I fire it up, the options are countless.
Don’t get me wrong, the filters on the site are great and I always liked it. But as a Data Scientist, I wonder if even with some simple Data Analysis navigating AirBnB could be made easier.&lt;/p&gt;

&lt;p&gt;That’s why I asked myself if I could use Rio de Janeiro’s (my hometown and a popular tourist city) AirBnB data to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Find out if I could narrow my search by looking directly into the cheapest zones and cheapest neighbourhoods into each zone.&lt;/li&gt;
  &lt;li&gt;Discover natural listing groups (i.e., clusters) based on their declared characteristics so that, if I wanted to, I could look into the group that suited me the most for a trip.&lt;/li&gt;
  &lt;li&gt;Find out which are the most (and least) common ammenities I should expect when looking into listings in Rio.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get into it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quick stop before we move forward, you can read this on &lt;a href=&quot;https://medium.com/@luccagomes/making-browsing-airbnb-easier-through-data-science-bf96e2a72e0c&quot;&gt;&lt;strong&gt;Medium&lt;/strong&gt;&lt;/a&gt; as well&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;sometimes-i-dont-want-to-spend-thatmuch&quot;&gt;Sometimes I don’t want to spend that much&lt;/h2&gt;
&lt;p&gt;Price is an easy go-to filter. But that isn’t the only factor to take into consideration in a travel. You might wonder about distance to touristical spots, public transportation or even if you are cutting a good deal for that region… Location matters.&lt;/p&gt;

&lt;p&gt;So to get a glimpse of that, we can try check out the prices by neighbourhood and even by city zone and see if they vary and, if so, we can rank them from cheapest to most expensive.&lt;/p&gt;

&lt;p&gt;The data I had at hand didn’t contain city zone information. But we won’t let that stop us. With an easy scrape using Pandas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_html&lt;/code&gt; method on this &lt;a href=&quot;https://pt.wikipedia.org/wiki/Lista_de_bairros_da_cidade_do_Rio_de_Janeiro&quot;&gt;Wikipedia page&lt;/a&gt;, we can get the city zone data to populate our table.&lt;/p&gt;

&lt;p&gt;So first let’s take a look into the price distribution for each city zone:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/rio_airbnb/price-distribution-by-region.png&quot; alt=&quot;Price Distribution per Zone&quot; /&gt;
This is a caption&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: y-axes are not shared between plots&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can see that generally price is a right-skewed distribution and that zones have effective differences in their distribution behaviour. For instance the south zone peaks more to the left then the north zone. West zone has a fatter tail.&lt;/p&gt;

&lt;p&gt;This gives us two informations: We can group regions and use a comparison metric since it most probably will wield different results. Given the distribution, the median will be used. This results in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rio_airbnb/price-median-by-zone.png&quot; alt=&quot;Zone Medians&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So when looking for a place to stay, listings on the North and Central regions might be more price-friendly.&lt;/p&gt;

&lt;p&gt;We can dig a little bit deeper and even, for each zone, list the neighbourhoods within each region that have the cheapest prices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rio_airbnb/price-median-detail.png&quot; alt=&quot;Neighbourhood Medians&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is where some domain knowledge kicks in, though. Especially on the West Zone, the cheapest lisitings are really far away from the downtown or touristical spots.&lt;/p&gt;

&lt;p&gt;But we have considerable price differences even within the cheapest/ expensive regions. So bringing this geographical layer on top of prices (and vice-versa) might facilitate users navigating through listings.&lt;/p&gt;

&lt;h2 id=&quot;but-what-if-im-looking-for-something-in-specific&quot;&gt;But what if I’m looking for something in specific?&lt;/h2&gt;
&lt;p&gt;Maybe location doesn’t matter as much if your priority is to first find listings suitable to your needs. That’s where clustering comes in. We can find natural groups of listings with similar features for someone can look into without the need to filter variable by variable.&lt;/p&gt;

&lt;p&gt;The variables that describe a listing can be interpreted essentially as categorical. It can be argued that something like the amount of bathrooms a listing has is continuous/numerical, but on the sample it was rare to have more than 3 bathrooms in an AirBnb listing, for example.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/rio_airbnb/bathroom-var-count.png&quot; alt=&quot;Bathrooms Count&quot; /&gt;
Count of listings for the bathroom variable. Note that from 3 bathrooms onward, there are few listings that contain more baths. There are even listings with no bathrooms!&lt;/p&gt;

&lt;p&gt;What we see for bathrooms happens generally for the other variables that describe listings as well.&lt;br /&gt;
This limits our approach to categorical variable clustering methods. For this one, I will be using KModes. But you could use some variation like Gower Distance + Hierarchical Clustering.&lt;/p&gt;

&lt;p&gt;After selecting our desired variables: Room Type, Number of Persons Accomodated, Bathrooms, Bedrooms and minimum accepted nights we can use our methods’ cost-function to set up an elbow-method plot and define our n for our clusters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rio_airbnb/elbow-plot.png&quot; alt=&quot;Elbow Plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like n = 8 is a nice enough amount of clusters. The rate in which the cost falls after that slows down heavily. When we run it we get the following clusters (using their centroid as reference):&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;/assets/img/rio_airbnb/cluster-centroids.png&quot; alt=&quot;Cluster Centroid&quot; /&gt;
Clusters&lt;/p&gt;

&lt;p&gt;Centroids, in this case, are the most-frequent value for each feature.&lt;br /&gt;
It is normal that most clusters are centered around Entire rooms/ apts in Entire Rental Units. These values dominate the dataset, having more than 50% of listing associated to them.&lt;/p&gt;

&lt;p&gt;The biggest differences come from the “size” of the listings and the minimum nights. With size I want to express how many people they accommodate and the amount of bathrooms, bedrooms, etc. that a listing has.&lt;/p&gt;

&lt;p&gt;If users were to search for listings in a city, the clusters could be a good starting point for showing them listings more aligned with their needs.&lt;/p&gt;

&lt;h2 id=&quot;what-if-i-want-wifi-in-myroom&quot;&gt;What if I want WiFi in my room?&lt;/h2&gt;
&lt;p&gt;Sometimes you want certain amenities. Sometimes you expect a room to have some basic things. So, it is only natural to try to find out what are the most common and rare amenities in listings. That way, users could know what to expect (or not to) for the listings in the city.&lt;/p&gt;

&lt;p&gt;To start off answering our final question, we look into the the amenities field available in the dataset. It is a somewhat tricky feature. It is a whole string that should’ve been a list. So it is a list contained within a string and a simple .split() won’t cut it.&lt;/p&gt;

&lt;p&gt;With a little bit of RegEx and text cleaning, we get our data to a list format. The only thing left to do is some text cleaning especially for WiFi. Since it’s is an important aspect nowadays, we do some special cleaning for it. WiFi values have multiple values like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rio_airbnb/wifi-writing.png&quot; alt=&quot;WiFi writing&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;Multiple different forms to write that a listing has WiFi&lt;/p&gt;

&lt;p&gt;With the cleaning handled, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.explode()&lt;/code&gt; method to turn our lists into rows and make our analysis easier.&lt;/p&gt;

&lt;p&gt;We get a total of 2788 unique amenities. But, considering each amenity is only listed once per listing, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.value_counts()&lt;/code&gt; on top of our exploded dataset to get the number of listings each amenity was cited in. This allows us to approach the problem using a Pareto logic. That is, a low number of amenities will show up with high frequency.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rio_airbnb/amenities-pareto.png&quot; alt=&quot;Ammenities Pareto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that even by making a cut as small as 10% on the proportion of listings an amenity shows up in, we already reduce the amount of amenities from 2788 to 56.&lt;/p&gt;

&lt;p&gt;I chose to work with this this 56 amenities subset. Considering that there might be a lot of amenities that will show up sparsely or are super specific, we cannot simply select the overall least cited amenities. This could lead to unnecessary/ wrong information.&lt;/p&gt;

&lt;p&gt;For instance, it is safe to assume that a refrigerator from a specific brand (which exists on the data) is not an amenity someone would actively look for. Even the least common amenities must be contained in a group within reason.&lt;/p&gt;

&lt;p&gt;With that in mind we get that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/rio_airbnb/amenities-ranking-top.png&quot; alt=&quot;Top Ammenities&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Are the most common amenities, so you can expect them to occur in a lot of the listings. Need WiFi? You’ll probably have it covered. No need to worry about it.&lt;/p&gt;

&lt;p&gt;On the other hand:
&lt;img src=&quot;/assets/img/rio_airbnb/amenities-ranking-bottom.png&quot; alt=&quot;Bottom Ammenities&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Are the least common amenities within that subset. So if for instance a beachfront view is a must for you when coming to Rio, you might only have more niched options available.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;All things considered, all 3 analyses show relatively simple ways data could be incorporated to facilitate decision-making within the platform for the users. If we get back to our starting questions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We can narrow our search for cheap listings by adding a geographical layer to our data. This could be even further explored if we incorporated more data like proximity to tourist sights or restaurants concentration , for instance.&lt;/li&gt;
  &lt;li&gt;It is possible to segregate listings based on their declared characteristics like amount of beds, rooms, etc. using a relatively simple clustering algorithm. This might be helpful to present to users more focused listing groups in-line with their needs without the need to manually set filters.&lt;/li&gt;
  &lt;li&gt;From more than 2000 amenities we can get a subset of 56 significant amenities that could allow a user to catch a glimpse of what they could expect in a lot of the listings or not. That way, expectations can easily be set.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Naturally, all three paths could be enhanced with more work put into them. But the conclusions show how already on the current state we can create value to an user by answering key-questions and focusing of efficient analysis methods.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;The full notebook and data can be found on my &lt;a href=&quot;https://github.com/bglucca/RioAirBnb?tab=readme-ov-file&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;
Data for AirBnB was collected from &lt;a href=&quot;https://insideairbnb.com/explore/&quot;&gt;&lt;strong&gt;Inside AirBnb&lt;/strong&gt;&lt;/a&gt;.&lt;br /&gt;
For more references into K-Modes, I recommend visiting &lt;a href=&quot;https://github.com/nicodv/kmodes&quot;&gt;&lt;strong&gt;nicodv’s GitHub&lt;/strong&gt;&lt;/a&gt; that contains not only the implementation of the algorithm but references to the Theory behind it.&lt;br /&gt;
This work was done as a submission to Udacity’s Data Science Nanodegree Program.&lt;/p&gt;

		</content>
		
		<author>
			<name>Lucca Bevilacqua</name><uri>https://github.com/bglucca</uri></author>
		<summary type="html">&lt;p&gt;I consider myself somewhat of a regular traveler. That’s why I often look for places to stay in AirBnb. But, when I fire it up, the options are countless.
Don’t get me wrong, the filters on the site are great and I always liked it. But as a Data Scientist, I wonder if even with some simple Data Analysis navigating AirBnB could be made easier.&lt;/p&gt;
</summary>
		<category term="posts"/>
		<category term="Case Study"/><category term="Data Analysis"/><category term="Data Science"/><category term="EDA"/><category term="Unsupervised Learning"/>
	</entry></feed>